// Mocks generated by Mockito 5.4.6 from annotations
// in blankets_and_wines_example/test/qrctest.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i5;

import 'package:flutter/foundation.dart' as _i4;
import 'package:flutter/rendering.dart' as _i2;
import 'package:flutter/services.dart' as _i3;
import 'package:flutter/src/widgets/editable_text.dart' as _i7;
import 'package:flutter/src/widgets/focus_manager.dart' as _i6;
import 'package:flutter/src/widgets/focus_traversal.dart' as _i10;
import 'package:flutter/src/widgets/framework.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTextSelection_0 extends _i1.SmartFake implements _i2.TextSelection {
  _FakeTextSelection_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTextEditingValue_1 extends _i1.SmartFake
    implements _i3.TextEditingValue {
  _FakeTextEditingValue_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTextSpan_2 extends _i1.SmartFake implements _i2.TextSpan {
  _FakeTextSpan_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeSize_3 extends _i1.SmartFake implements _i5.Size {
  _FakeSize_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeOffset_4 extends _i1.SmartFake implements _i5.Offset {
  _FakeOffset_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRect_5 extends _i1.SmartFake implements _i5.Rect {
  _FakeRect_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFocusAttachment_6 extends _i1.SmartFake
    implements _i6.FocusAttachment {
  _FakeFocusAttachment_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDiagnosticsNode_7 extends _i1.SmartFake
    implements _i4.DiagnosticsNode {
  _FakeDiagnosticsNode_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({
    _i4.TextTreeConfiguration? parentConfiguration,
    _i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info,
  }) => super.toString();
}

/// A class which mocks [TextEditingController].
///
/// See the documentation for Mockito's code generation for more information.
class MockTextEditingController extends _i1.Mock
    implements _i7.TextEditingController {
  MockTextEditingController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get text =>
      (super.noSuchMethod(
            Invocation.getter(#text),
            returnValue: _i8.dummyValue<String>(this, Invocation.getter(#text)),
          )
          as String);

  @override
  _i2.TextSelection get selection =>
      (super.noSuchMethod(
            Invocation.getter(#selection),
            returnValue: _FakeTextSelection_0(
              this,
              Invocation.getter(#selection),
            ),
          )
          as _i2.TextSelection);

  @override
  set text(String? newText) => super.noSuchMethod(
    Invocation.setter(#text, newText),
    returnValueForMissingStub: null,
  );

  @override
  set value(_i3.TextEditingValue? newValue) => super.noSuchMethod(
    Invocation.setter(#value, newValue),
    returnValueForMissingStub: null,
  );

  @override
  set selection(_i2.TextSelection? newSelection) => super.noSuchMethod(
    Invocation.setter(#selection, newSelection),
    returnValueForMissingStub: null,
  );

  @override
  _i3.TextEditingValue get value =>
      (super.noSuchMethod(
            Invocation.getter(#value),
            returnValue: _FakeTextEditingValue_1(
              this,
              Invocation.getter(#value),
            ),
          )
          as _i3.TextEditingValue);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i2.TextSpan buildTextSpan({
    required _i9.BuildContext? context,
    _i2.TextStyle? style,
    required bool? withComposing,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#buildTextSpan, [], {
              #context: context,
              #style: style,
              #withComposing: withComposing,
            }),
            returnValue: _FakeTextSpan_2(
              this,
              Invocation.method(#buildTextSpan, [], {
                #context: context,
                #style: style,
                #withComposing: withComposing,
              }),
            ),
          )
          as _i2.TextSpan);

  @override
  void clear() => super.noSuchMethod(
    Invocation.method(#clear, []),
    returnValueForMissingStub: null,
  );

  @override
  void clearComposing() => super.noSuchMethod(
    Invocation.method(#clearComposing, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [FocusNode].
///
/// See the documentation for Mockito's code generation for more information.
class MockFocusNode extends _i1.Mock implements _i6.FocusNode {
  MockFocusNode() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get skipTraversal =>
      (super.noSuchMethod(Invocation.getter(#skipTraversal), returnValue: false)
          as bool);

  @override
  bool get canRequestFocus =>
      (super.noSuchMethod(
            Invocation.getter(#canRequestFocus),
            returnValue: false,
          )
          as bool);

  @override
  bool get descendantsAreFocusable =>
      (super.noSuchMethod(
            Invocation.getter(#descendantsAreFocusable),
            returnValue: false,
          )
          as bool);

  @override
  bool get descendantsAreTraversable =>
      (super.noSuchMethod(
            Invocation.getter(#descendantsAreTraversable),
            returnValue: false,
          )
          as bool);

  @override
  Iterable<_i6.FocusNode> get children =>
      (super.noSuchMethod(
            Invocation.getter(#children),
            returnValue: <_i6.FocusNode>[],
          )
          as Iterable<_i6.FocusNode>);

  @override
  Iterable<_i6.FocusNode> get traversalChildren =>
      (super.noSuchMethod(
            Invocation.getter(#traversalChildren),
            returnValue: <_i6.FocusNode>[],
          )
          as Iterable<_i6.FocusNode>);

  @override
  Iterable<_i6.FocusNode> get descendants =>
      (super.noSuchMethod(
            Invocation.getter(#descendants),
            returnValue: <_i6.FocusNode>[],
          )
          as Iterable<_i6.FocusNode>);

  @override
  Iterable<_i6.FocusNode> get traversalDescendants =>
      (super.noSuchMethod(
            Invocation.getter(#traversalDescendants),
            returnValue: <_i6.FocusNode>[],
          )
          as Iterable<_i6.FocusNode>);

  @override
  Iterable<_i6.FocusNode> get ancestors =>
      (super.noSuchMethod(
            Invocation.getter(#ancestors),
            returnValue: <_i6.FocusNode>[],
          )
          as Iterable<_i6.FocusNode>);

  @override
  bool get hasFocus =>
      (super.noSuchMethod(Invocation.getter(#hasFocus), returnValue: false)
          as bool);

  @override
  bool get hasPrimaryFocus =>
      (super.noSuchMethod(
            Invocation.getter(#hasPrimaryFocus),
            returnValue: false,
          )
          as bool);

  @override
  _i6.FocusHighlightMode get highlightMode =>
      (super.noSuchMethod(
            Invocation.getter(#highlightMode),
            returnValue: _i6.FocusHighlightMode.touch,
          )
          as _i6.FocusHighlightMode);

  @override
  _i5.Size get size =>
      (super.noSuchMethod(
            Invocation.getter(#size),
            returnValue: _FakeSize_3(this, Invocation.getter(#size)),
          )
          as _i5.Size);

  @override
  _i5.Offset get offset =>
      (super.noSuchMethod(
            Invocation.getter(#offset),
            returnValue: _FakeOffset_4(this, Invocation.getter(#offset)),
          )
          as _i5.Offset);

  @override
  _i5.Rect get rect =>
      (super.noSuchMethod(
            Invocation.getter(#rect),
            returnValue: _FakeRect_5(this, Invocation.getter(#rect)),
          )
          as _i5.Rect);

  @override
  set onKey(_i6.FocusOnKeyCallback? _onKey) => super.noSuchMethod(
    Invocation.setter(#onKey, _onKey),
    returnValueForMissingStub: null,
  );

  @override
  set onKeyEvent(_i6.FocusOnKeyEventCallback? _onKeyEvent) =>
      super.noSuchMethod(
        Invocation.setter(#onKeyEvent, _onKeyEvent),
        returnValueForMissingStub: null,
      );

  @override
  set skipTraversal(bool? value) => super.noSuchMethod(
    Invocation.setter(#skipTraversal, value),
    returnValueForMissingStub: null,
  );

  @override
  set canRequestFocus(bool? value) => super.noSuchMethod(
    Invocation.setter(#canRequestFocus, value),
    returnValueForMissingStub: null,
  );

  @override
  set descendantsAreFocusable(bool? value) => super.noSuchMethod(
    Invocation.setter(#descendantsAreFocusable, value),
    returnValueForMissingStub: null,
  );

  @override
  set descendantsAreTraversable(bool? value) => super.noSuchMethod(
    Invocation.setter(#descendantsAreTraversable, value),
    returnValueForMissingStub: null,
  );

  @override
  set debugLabel(String? value) => super.noSuchMethod(
    Invocation.setter(#debugLabel, value),
    returnValueForMissingStub: null,
  );

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  void unfocus({
    _i6.UnfocusDisposition? disposition = _i6.UnfocusDisposition.scope,
  }) => super.noSuchMethod(
    Invocation.method(#unfocus, [], {#disposition: disposition}),
    returnValueForMissingStub: null,
  );

  @override
  bool consumeKeyboardToken() =>
      (super.noSuchMethod(
            Invocation.method(#consumeKeyboardToken, []),
            returnValue: false,
          )
          as bool);

  @override
  _i6.FocusAttachment attach(
    _i9.BuildContext? context, {
    _i6.FocusOnKeyEventCallback? onKeyEvent,
    _i6.FocusOnKeyCallback? onKey,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #attach,
              [context],
              {#onKeyEvent: onKeyEvent, #onKey: onKey},
            ),
            returnValue: _FakeFocusAttachment_6(
              this,
              Invocation.method(
                #attach,
                [context],
                {#onKeyEvent: onKeyEvent, #onKey: onKey},
              ),
            ),
          )
          as _i6.FocusAttachment);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void requestFocus([_i6.FocusNode? node]) => super.noSuchMethod(
    Invocation.method(#requestFocus, [node]),
    returnValueForMissingStub: null,
  );

  @override
  bool nextFocus() =>
      (super.noSuchMethod(Invocation.method(#nextFocus, []), returnValue: false)
          as bool);

  @override
  bool previousFocus() =>
      (super.noSuchMethod(
            Invocation.method(#previousFocus, []),
            returnValue: false,
          )
          as bool);

  @override
  bool focusInDirection(_i10.TraversalDirection? direction) =>
      (super.noSuchMethod(
            Invocation.method(#focusInDirection, [direction]),
            returnValue: false,
          )
          as bool);

  @override
  void debugFillProperties(_i4.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(
        Invocation.method(#debugFillProperties, [properties]),
        returnValueForMissingStub: null,
      );

  @override
  List<_i4.DiagnosticsNode> debugDescribeChildren() =>
      (super.noSuchMethod(
            Invocation.method(#debugDescribeChildren, []),
            returnValue: <_i4.DiagnosticsNode>[],
          )
          as List<_i4.DiagnosticsNode>);

  @override
  String toStringShort() =>
      (super.noSuchMethod(
            Invocation.method(#toStringShort, []),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.method(#toStringShort, []),
            ),
          )
          as String);

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();

  @override
  String toStringShallow({
    String? joiner = ', ',
    _i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toStringShallow, [], {
              #joiner: joiner,
              #minLevel: minLevel,
            }),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.method(#toStringShallow, [], {
                #joiner: joiner,
                #minLevel: minLevel,
              }),
            ),
          )
          as String);

  @override
  String toStringDeep({
    String? prefixLineOne = '',
    String? prefixOtherLines,
    _i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.debug,
    int? wrapWidth = 65,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toStringDeep, [], {
              #prefixLineOne: prefixLineOne,
              #prefixOtherLines: prefixOtherLines,
              #minLevel: minLevel,
              #wrapWidth: wrapWidth,
            }),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.method(#toStringDeep, [], {
                #prefixLineOne: prefixLineOne,
                #prefixOtherLines: prefixOtherLines,
                #minLevel: minLevel,
                #wrapWidth: wrapWidth,
              }),
            ),
          )
          as String);

  @override
  _i4.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i4.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toDiagnosticsNode, [], {
              #name: name,
              #style: style,
            }),
            returnValue: _FakeDiagnosticsNode_7(
              this,
              Invocation.method(#toDiagnosticsNode, [], {
                #name: name,
                #style: style,
              }),
            ),
          )
          as _i4.DiagnosticsNode);

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
